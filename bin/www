#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('TweetGraph:server');
var http = require('http');
var cfg = require('../config');
var streamHandler = require('../streamHandler');
var mongoose = require('mongoose');

var Twitter = require('node-tweet-stream');
var tw = new Twitter(cfg.twitter);

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort( val ) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError( error ) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	debug('Listening on ' + bind);
}
mongoose.connect('mongodb://localhost/tweet-graph');

var io = require('socket.io')(server);

io.on('connection', function ( socket ) {
	console.log('got socket.io connection - id: %s', socket.id);

	socket.on('myEvent', function () {
		console.log('"myEvent" event received');
	});

	socket.on('disconnect', function () {
		console.log('Dropped socket.io connection - id: %s', socket.id);

	});
});

tw.track('limetray');
tw.track('#limetray');
tw.track('@limetray');
tw.on('tweet', function ( tweet ) {
	console.log(tweet.text)
	streamHandler(tweet, io);
});
